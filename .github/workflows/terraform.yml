name: 'Terraform'

on:
  push:
    branches:
    - "main"

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./infra

    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_fingerprint : ${{ secrets.TF_VAR_fingerprint }}
      TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_tenancy_ocid }}
      TF_VAR_user_ocid: ${{ secrets.TF_VAR_user_ocid }}
      TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}

    - name: Terraform Init
      run: terraform init -upgrade
  
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: Get Instance IPs
      id: get_ips
      run: echo "instance_public_ips=$(terraform output -json instance_public_ips)" >> "$GITHUB_OUTPUT"

    outputs:
      instance_public_ips: ${{ steps.get_ips.outputs.instance_public_ips }}

  ansible:
    name: Ansible
    runs-on: ubuntu-latest
    needs: terraform
    container: ghcr.io/ansible/creator-ee:latest
    env:
      NPM_USER: ${{ secrets.NPM_USER }}
      NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
      CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Write SSH key
        env:
          SSH_KEY_B64: ${{ secrets.VM_PRIVATE_KEY_B64 }}
        run: |
          install -m 700 -d ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          INSTANCES_IPS=$(echo '${{ needs.terraform.outputs.instance_public_ips }}' | tr -d '[]" ' | tr ',' ' ')
          
          for ip in $INSTANCES_IPS; do
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
          done

      - name: Create Ansible inventory
        run: |
          INSTANCES_IPS=($(echo '${{ needs.terraform.outputs.instance_public_ips }}' | tr -d '[]" ' | tr ',' ' '))

          echo "[big]" > inventory.ini
          echo "${INSTANCES_IPS[0]} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

          echo "[small]" >> inventory.ini
          echo "${INSTANCES_IPS[1]} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Run Docker Setup Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: ansible-playbook -i inventory.ini ansible/docker_setup.yml

      # - name: Run Swarm Setup Playbook
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: 'False'
      #   run: ansible-playbook -i inventory.ini ansible/swarm_setup.yml

      - name: Run NPM Setup Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: ansible-playbook -i inventory.ini ansible/npm_setup.yml -e "npm_user=$NPM_USER" -e "npm_password=$NPM_PASSWORD" -e "cf_api_token=$CF_API_TOKEN"

      - name: Run Apps
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: ansible-playbook -i inventory.ini ansible/start_apps.yml -e "openai_api_key=$OPENAI_API_KEY" 
