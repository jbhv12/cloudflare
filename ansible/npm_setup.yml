- hosts: big
  become: yes
  vars:
    proxy_hosts:
      - domain_names: ["npm.o.is-savvy.dev"]
        forward_host: "localhost"
        forward_port: 81
      - domain_names: ["ai.o.is-savvy.dev"]
        forward_host: "host.docker.internal"
        forward_port: 3145

  tasks:
    - name: Copy apps directory to target
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../apps/"
        dest: "/home/{{ ansible_user }}/apps/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: preserve
    
    - name: Run Docker Compose
      ansible.builtin.shell: |
        export NPM_USER="{{ npm_user }}"
        export NPM_PASSWORD="{{ npm_password }}"
        docker compose up -d
      args:
        chdir: "/home/{{ ansible_user }}/apps/npm"

    - name: Wait for API to be ready
      ansible.builtin.wait_for:
        host: localhost
        port: 81
        delay: 5
        timeout: 60

    - name: Create API token
      ansible.builtin.uri:
        url: "http://localhost:81/api/tokens"
        method: POST
        body_format: json
        body:
          identity: "{{ npm_user }}"
          secret: "{{ npm_password }}"
          scope: "user"
        headers:
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
      register: token_response

    - name: Extract token from response
      set_fact:
        api_token: "{{ (token_response.content | from_json).token }}"

    - name: Check for existing certificate
      ansible.builtin.uri:
        url: "http://localhost:81/api/nginx/certificates"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
        return_content: yes
        status_code: 200
      register: existing_certs

    - name: Set cert_domains variable
      set_fact:
        cert_domains:
          - "o.is-savvy.dev"
          - "*.o.is-savvy.dev"

    - name: Find existing certificate
      set_fact:
        found_cert: "{{ item }}"
      loop: "{{ existing_certs.json }}"
      when: "cert_domains | sort == item.domain_names | sort"

    - name: Create TLS certificate
      ansible.builtin.uri:
        url: "http://localhost:81/api/nginx/certificates"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ api_token }}"
        body_format: json
        body:
          provider: "letsencrypt"
          nice_name: "*.o.is-savvy.dev"
          domain_names:
            - "o.is-savvy.dev"
            - "*.o.is-savvy.dev"
          meta:
            letsencrypt_email: "jbhv12@gmail.com"
            letsencrypt_agree: true
            dns_challenge: true
            dns_provider: "cloudflare"
            dns_provider_credentials: "dns_cloudflare_api_token={{ cf_api_token }}"
            propagation_seconds: 120
        status_code: [200, 201]
      register: certificate_creation
      when: found_cert is not defined

    - name: Set certificate ID
      set_fact:
        cert_id: "{{ found_cert.id if found_cert is defined else certificate_creation.json.id }}"

    - name: Create proxy hosts
      ansible.builtin.uri:
        url: "http://localhost:81/api/nginx/proxy-hosts"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ api_token }}"
        body_format: json
        body:
          domain_names: "{{ item.domain_names }}"
          forward_scheme: "http"
          forward_host: "{{ item.forward_host }}"
          forward_port: "{{ item.forward_port }}"
          access_list_id: 0
          certificate_id: "{{ cert_id }}"
          ssl_forced: true
          caching_enabled: false
          block_exploits: true
          allow_websocket_upgrade: true
          http2_support: true
          hsts_enabled: false
          hsts_subdomains: false
          enabled: true
          advanced_config: ""
          meta: {}
        status_code: [200, 201]
      loop: "{{ proxy_hosts }}"
      register: proxy_creation
      ignore_errors: true

    - name: Fail if proxy host creation failed for other reasons
      ansible.builtin.fail:
        msg: "Failed to create proxy host {{ item.item.domain_names[0] }}: {{ item.msg }}"
      loop: "{{ proxy_creation.results }}"
      when:
        - item.failed
        - "'is already in use' not in item.json.error.message" 