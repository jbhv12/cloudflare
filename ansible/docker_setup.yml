---
- hosts: all
  become: yes
  vars:
    manager_host: "{{ groups['big'][0] }}"

  pre_tasks:
    - name: Remove any old docker.list before apt cache runs
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent

  tasks:
    - name: Update and upgrade apt packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker GPG key (keyring file)
      ansible.builtin.shell: |
        set -eu
        install -m 0755 -d /usr/share/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
          | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        chmod 0644 /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository (idempotent)
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: docker
        state: present

    - name: Update apt cache after adding Docker repo
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Docker Engine and CLI
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - ansible.builtin.debug:
        var: docker_version.stdout

    - name: Copy docker-compose.yml to target
      ansible.builtin.copy:
        src: ../compose/docker-compose.yml
        dest: /home/{{ ansible_user }}/docker-compose.yml
        mode: '0644'

    - name: Run docker compose up
      ansible.builtin.shell: docker compose -f /home/{{ ansible_user }}/docker-compose.yml up -d
      args:
        chdir: /home/{{ ansible_user }}

    - name: Check local Swarm state
      ansible.builtin.command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state
      changed_when: false
      failed_when: false

    - name: Normalize swarm state
      ansible.builtin.set_fact:
        swarm_state_norm: "{{ (swarm_state.stdout | default('') | trim | lower) }}"

    - name: Initialize Docker Swarm on manager
      ansible.builtin.command: docker swarm init --advertise-addr {{ (ansible_host | default(ansible_default_ipv4.address | default(inventory_hostname))) }}
      when:
        - inventory_hostname == manager_host
        - swarm_state_norm != 'active'
      register: swarm_init_result
      changed_when: "'already part of a swarm' not in (swarm_init_result.stderr | default('') | lower)"

    - name: Get worker join token from manager
      ansible.builtin.command: docker swarm join-token -q worker
      when: inventory_hostname == manager_host
      register: worker_join_token

    - name: Publish swarm facts on manager host
      ansible.builtin.set_fact:
        swarm_manager_addr: "{{ ansible_host | default(ansible_default_ipv4.address | default(inventory_hostname)) }}"
        swarm_worker_token: "{{ worker_join_token.stdout }}"
      when: inventory_hostname == manager_host

    - name: Get remote managers on workers (if in a swarm)
      ansible.builtin.command: docker info --format '{% raw %}{{range .Swarm.RemoteManagers}}{{.Addr}} {{end}}{% endraw %}'
      register: remote_mgrs
      changed_when: false
      failed_when: false
      when:
        - inventory_hostname in groups['small']
        - swarm_state_norm == 'active'

    - name: Determine if worker is joined to the correct manager
      ansible.builtin.set_fact:
        joined_correct_manager: "{{ (remote_mgrs.stdout | default('')) is search(hostvars[manager_host].swarm_manager_addr ~ ':2377') }}"
      when:
        - inventory_hostname in groups['small']
        - swarm_state_norm == 'active'

    - name: Leave wrong swarm on workers
      ansible.builtin.command: docker swarm leave --force
      when:
        - inventory_hostname in groups['small']
        - swarm_state_norm == 'active'
        - not joined_correct_manager | default(false)

    - name: Join Docker Swarm on workers
      ansible.builtin.command: >
        docker swarm join
        --token {{ hostvars[manager_host].swarm_worker_token }}
        {{ hostvars[manager_host].swarm_manager_addr }}:2377
      register: join_result
      retries: 5
      delay: 10
      until: join_result.rc == 0 or ('already part of a swarm' in (join_result.stderr | lower))
      failed_when: join_result.rc != 0 and ('already part of a swarm' not in (join_result.stderr | lower))
      changed_when: join_result.rc == 0
      when:
        - inventory_hostname in groups['small']
        - swarm_state_norm != 'active' or (swarm_state_norm == 'active' and not joined_correct_manager | default(false))

    - name: Recheck Swarm state after potential join (workers)
      ansible.builtin.command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state_after
      changed_when: false
      failed_when: false
      when:
        - inventory_hostname in groups['small']

    - name: Normalize post-join swarm state (workers)
      ansible.builtin.set_fact:
        swarm_state_norm_after: "{{ (swarm_state_after.stdout | default('') | trim | lower) }}"
      when:
        - inventory_hostname in groups['small']

    - name: Tag 'big' instance as 'big'
      ansible.builtin.command: docker node update --label-add node_type=big {{ ansible_hostname }}
      when:
        - inventory_hostname == manager_host

    - name: Tag 'small' instance as 'small'
      ansible.builtin.command: docker node update --label-add node_type=small {{ ansible_hostname }}
      when:
        - inventory_hostname in groups['small']
        - (swarm_state_norm_after | default(swarm_state_norm)) == 'active'
