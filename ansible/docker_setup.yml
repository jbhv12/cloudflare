---
- hosts: all
  become: yes
  vars:
    manager_host: "{{ groups['big'][0] }}"

  pre_tasks:
    - name: Remove any old docker.list before apt cache runs
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent

  tasks:
    - name: Update and upgrade apt packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker GPG key (keyring file)
      ansible.builtin.shell: |
        set -eu
        install -m 0755 -d /usr/share/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
          | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        chmod 0644 /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository (idempotent)
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: docker
        state: present

    - name: Update apt cache after adding Docker repo
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Docker Engine and CLI
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - ansible.builtin.debug:
        var: docker_version.stdout

    - name: Copy docker-compose.yml to target
      ansible.builtin.copy:
        src: ../compose/docker-compose.yml
        dest: /home/{{ ansible_user }}/docker-compose.yml
        mode: '0644'

    - name: Run docker compose up
      ansible.builtin.shell: docker compose -f /home/{{ ansible_user }}/docker-compose.yml up -d
      args:
        chdir: /home/{{ ansible_user }}

    - name: Check local Swarm state
      ansible.builtin.command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state
      changed_when: false
      failed_when: false


    # ----- MANAGER (run once on the first 'big' host) -----
    - name: Initialize Docker Swarm on manager (first 'big' host)
      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_host }}
      when:
        - inventory_hostname == manager_host
        - swarm_state.stdout != 'active'
      register: swarm_init_result
      changed_when: "'This node is already part of a swarm' not in swarm_init_result.stderr|default('')"

    - name: Get worker join token from manager
      ansible.builtin.command: docker swarm join-token -q worker
      when: inventory_hostname == manager_host
      register: worker_join_token

    # Store the token & manager address as global (delegated) facts on localhost
    - name: Publish swarm facts for all hosts to read
      ansible.builtin.set_fact:
        swarm_worker_token: "{{ worker_join_token.stdout }}"
        swarm_manager_addr: "{{ hostvars[manager_host].ansible_host }}"
      when: inventory_hostname == manager_host
      delegate_to: localhost
      delegate_facts: true

    # ----- WORKERS ('small' group) -----
    - name: Join Docker Swarm on workers
      ansible.builtin.command: >
        docker swarm join
        --token {{ hostvars['localhost'].swarm_worker_token }}
        {{ hostvars['localhost'].swarm_manager_addr }}:2377
      when:
        - inventory_hostname in groups['small']
        - swarm_state.stdout != 'active'

    # ----- OPTIONAL LABELS -----
    - name: Tag 'big' instance as 'big'
      ansible.builtin.command: docker node update --label-add node_type=big {{ ansible_hostname }}
      when:
        - inventory_hostname == manager_host

    - name: Tag 'small' instance as 'small'
      ansible.builtin.command: docker node update --label-add node_type=small {{ ansible_hostname }}
      when:
        - inventory_hostname in groups['small']
        - swarm_state.stdout == 'active'